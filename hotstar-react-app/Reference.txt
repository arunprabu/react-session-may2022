Node Ecosystem
--
  android - Google Play - Marketplace 
  ----
    default apps 
    --
      calc, calendar, phone book, dialer, camera, google play app 

    third-party apps
    --
      instagram, snapchat, whatsapp, bookmyshow,

    client tool: Google Play app 
    --
      * search
      * install 
      * update
      * uninstall 


------
  web dev - npmjs.com - Marketplace 
  ---
    default packages  
    ---
      ..... 

    third-party apps
    ---
      react, @angular/core, vue, bootstrap, jquery, 

    client tool: npm 
      --
        * install 
            npm i bootstrap 

        * update
            npm update bootstrap 

        * uninstall 
            npm uninstall bootstrap 
            
--- 
Dependencies
---
  1. Project Dependencies 
      * some packages are needed for the app's feature to work 

      examples: @angular/core, react, vue, jquery

      npm i bootstrap (or )
      npm i bootstrap --save (or)
      npm i bootstrap -S  

  2. Dev Dependencies 
      * some packages are needed for the project to be developed 
      examples: webpack, typescript, nodemon, babel   
      
      npm i typescript --save-dev  (or)
      npm i typescript -D 


  3. Global Dependencies 
      * will be installed system-wide 

      npm i @angular/cli -g 
      ng new pjt-name

----

TODO: npm prune 
TODO: Where will the global dependencies be stored in windows? 


----------

Webapps
---
  1. Server Side Rendering Apps (SSR) 
      * pages will refresh / reload 
      Arch
      --
        1 Server 
      
      Codebase:
      ---
        Front End (HTML, CSS, JS) + Back End (Java/ PHP) + DB Queries (MySQL)
      
      Response: 
      --
        HTML, CSS, JS + Data 

      Disadv
      ---
        * apps are slower 
        * high bandwidth consumption 
        * expensive
        * bad user experience 
        * code - mainatenance chaos 

  2. Client Side Rendering Apps (CSR)
      * pages will not refresh / reload 
      Arch
      --
        2 Servers 
          1 Front End Server - Single Page App (SPA)
             Response: HTML, CSS, JS, (wait for data)
          
          1 Back End Server - REST API 
            Response: Data (JSON)
      
      Codebase: 
      --  
        Front End Codebase: HTML, CSS, JS 

        Back End Codebase: Java/PHP + MySQL 

Single Page App Characteristics (7)
----
  1. Page should not refresh [DONE]
  2. URL should change [DONE]
  3. History should be maintained [DONE]
  4. Retain header and footer [DONE]
  5. App should show contextual updates in b/w header and footer [DONE]
  6. Active menu should be set [DONE]
  7. Page title should also be updated  [TODO]

----
Single Page App Frameworks / Libraries 
---
  #1 React JS - Library 
  #2 VueJS    - Framework 
  #3 Angular  - Framework 

----





Components
---
  * should return JSX 
  * should be exported 

  1. Functional Components 
      1.1 Functional comp with Named Function 
      1.2 Functional comp with Anonymous Function 
      1.3 Functional comp with Arrow Function [RECOMMENDED]

  2. Class Components / Containers 
      class, extends 

-----------
JSX 
--
    * html-like syntax 
    * mandatory closing of tags 
    * self-close the tag or separately close the tag 
    * should not have class attribute in element 

Styles
---
  1. External CSS [DONE]
  2. Internal CSS 
  3. Inline CSS 


Project Structure 
---
src/
  components/
    shared/
      Header
      Footer
      Menu 
    Home 
      Program
    About 
    Contact
    ..
    ...
    ...
    ..
    ...
    ..

----

Cross Component Communication
---
  1. Parent to Child Comp Communication [DONE]
      using props 
  
  2. Child to Parent Comp Communication [TODO]
      using props, events with callback fn

  3. Any to Any Comp Communication 
      using Context API  or else Redux / Flux / MobX 

----

Topics
---
  
  Page Not Found - 404 [TODO]
  Routing with React-router-dom v6 
  HOC 
  ErrorBoundary 
  
  React Without ES6
  React Without JSX

  Typechecking With PropTypes

  Forms 
    Refs and DOM 
    Uncontrolled Components
  AJAX -- REST API Call


 

  Context API 

  React Hooks 

  Code-Splitting (React Suspense + React Lazy)
  
  SASS Integration 

  Redux




---

Routing in React 
---
  Step 0: 
    Identify the URLs
    localhost:3000/             -- Home Menu
    localhost:3000/hoc-demo     -- HOC Demo Menu 
    localhost:3000/about        -- About Menu
    localhost:3000/support      -- Support Menu

  Step 1:
    Let's setup the about URL's properly in Menu.js 

  Step 2: 
    Let's create the components for all urls
      Home.js     -- Home Menu 
      HocDemo.js  -- Hoc Demo Menu 
      About.js    -- About Menu
      Support.js  -- Support Menu

  Step 3: 
    Now, it is time to setup routing using react-router-dom 
    npm i react-router-dom

  Step 4: 
    Follow the react-router-dom tutorial and implement routing 
    Put the whole app under <BrowserRouter> -- Refer App.js 

  Step 5: 
    Config the URL's in App.js
    <Routes>
      <Route path="/" element={<Home/>} />
      <Route path="/hoc-demo" element={<HocDemo/>} />
      <Route path="/about" element={<About/>} />
      <Route path="/support" element={<Support/>} />
    </Routes>

  Step 6:
    Replace a href with <NavLink to='/'>

  Step 7: 
    It's over. 




